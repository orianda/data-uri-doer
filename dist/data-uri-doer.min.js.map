{"version":3,"sources":["data-uri-doer.min.js"],"names":["create","Class","isNil","value","clone","data","issue","Array","i","l","length","Object","k","hasOwnProperty","encodeAttr","attr","name","encodeURIComponent","push","join","decodeAttr","string","chunks","split","splits","decodeURIComponent","shift","encodeUri","type","base64","btoa","toLowerCase","DEFAULT_TYPE","charset","DEFAULT_CHARSET","decodeUri","uri","match","trim","Error","atob","DataUriDoer","this","prototype","toString","parse","parsed","dud","global","Buffer","module","exports","window"],"mappings":"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","file":"data-uri-doer.min.js","sourcesContent":["/*!\n * data-uri-doer\n * Encode and decode data uris.\n *\n * @version v1.0.0\n * @link https://github.com/orianda/data-uri-doer\n * @author Orianda <orianda@paan.de>\n * @license MIT\n */\n(function (create) {\r\n  'use strict';\r\n\r\n  var Class = create();\r\n\r\n  if (typeof module === 'object' && module instanceof Object && module.exports instanceof Object) {\r\n    module.exports = Class;\r\n  } else if (typeof window === 'object' && window instanceof Object) {\r\n    window[Class.name] = Class;\r\n  } else {\r\n    throw new Error('No valid context available.');\r\n  }\r\n\r\n})(function () {\r\n  'use strict';\r\n\r\n  var DEFAULT_TYPE = 'text/plain',\r\n    DEFAULT_CHARSET = 'US-ASCII';\r\n\r\n  /**\r\n   * Is value null or undefined\r\n   * @param {*} value\r\n   * @returns {boolean}\r\n   */\r\n  function isNil(value) {\r\n    return typeof value === 'undefined' || value === null;\r\n  }\r\n\r\n  /**\r\n   * Clone data\r\n   * @param {*} data\r\n   * @returns {*}\r\n   */\r\n  function clone(data) {\r\n    var issue;\r\n    if (data instanceof Array) {\r\n      issue = [];\r\n      for (var i = 0, l = data.length; i < l; i++) {\r\n        issue[i] = clone(data[i]);\r\n      }\r\n    } else if (data instanceof Object) {\r\n      issue = {};\r\n      for (var k in data) {\r\n        if (data.hasOwnProperty(k)) {\r\n          issue[k] = clone(data[k]);\r\n        }\r\n      }\r\n    } else {\r\n      issue = data;\r\n    }\r\n    return issue;\r\n  }\r\n\r\n  /**\r\n   * Converts attributes\r\n   * @param {Object} attr\r\n   * @returns {string}\r\n   */\r\n  function encodeAttr(attr) {\r\n    var issue = [];\r\n    for (var k in attr) {\r\n      if (attr.hasOwnProperty(k)) {\r\n        var name = encodeURIComponent(k),\r\n          data = isNil(attr[k]) ? '' : encodeURIComponent(attr[k]);\r\n        issue.push(';' + name + '=' + data);\r\n      }\r\n    }\r\n    return issue.join('');\r\n  }\r\n\r\n  /**\r\n   * Parses attributes\r\n   * @param {string} string\r\n   * @returns {Object}\r\n   */\r\n  function decodeAttr(string) {\r\n    var attr = {},\r\n      chunks = string.split(';');\r\n    for (var i = 0, l = chunks.length; i < l; i++) {\r\n      if (chunks[i]) {\r\n        var splits = chunks[i].split('='),\r\n          name = decodeURIComponent(splits.shift());\r\n        attr[name] = decodeURIComponent(splits.join('='));\r\n      }\r\n    }\r\n    return attr;\r\n  }\r\n\r\n  /**\r\n   * Converts data uri\r\n   * @param {string} data\r\n   * @param {string} [type]\r\n   * @param {Object} [attr]\r\n   * @param {boolean} [base64=false]\r\n   * @returns {string}\r\n   */\r\n  function encodeUri(data, type, attr, base64) {\r\n    data = isNil(data) ? '' : base64 ? btoa(data) : encodeURIComponent(data);\r\n    type = isNil(type) ? '' : type.toLowerCase() === DEFAULT_TYPE ? '' : type;\r\n    if (attr && attr.charset === DEFAULT_CHARSET) {\r\n      delete attr.charset;\r\n    }\r\n    return 'data:' + type + encodeAttr(attr) + (base64 ? ';base64' : '') + ',' + data;\r\n  }\r\n\r\n  /**\r\n   * Parses data uri\r\n   * @param {string} uri\r\n   * @param {string} [type] Fallback mime type\r\n   * @param {string} [charset] Fallback charset\r\n   * @returns {Object}\r\n   */\r\n  function decodeUri(uri, type, charset) {\r\n    var issue = {},\r\n      match = isNil(uri) ? null : uri.trim().match(/^data:([^;,]*)((?:;[^;,]*)*?)(;base64)?,(.*)$/);\r\n\r\n    if (!match) {\r\n      throw new Error('Invalid data uri');\r\n    }\r\n\r\n    issue.type = match[1] || type || '';\r\n    issue.attr = decodeAttr(match[2]);\r\n    issue.attr.charset = issue.attr.charset || charset;\r\n    issue.data = match[3] ? atob(match[4]) : decodeURIComponent(match[4]);\r\n\r\n    return issue;\r\n  }\r\n\r\n  /**\r\n   * Create data uri instance\r\n   * @param {string|DataUriDoer} data\r\n   * @param {string} [type=\"text/plain\"]\r\n   * @param {Object} [attr]\r\n   * @param {string} [attr.charset=\"US-ASCII\"]\r\n   * @returns {DataUriDoer}\r\n   * @constructor\r\n   */\r\n  function DataUriDoer(data, type, attr) {\r\n\r\n    /**\r\n     * Ensure this function was called using new operator\r\n     */\r\n    if (!(this instanceof DataUriDoer)) {\r\n      return new DataUriDoer(data, type, attr);\r\n    }\r\n\r\n    this.data = data || '';\r\n    this.type = type || DEFAULT_TYPE;\r\n    this.attr = attr || {};\r\n    this.attr.charset = this.attr.charset || DEFAULT_CHARSET;\r\n  }\r\n\r\n  /**\r\n   * Convert data uri to string\r\n   * @param {boolean} [base64=false]\r\n   * @returns {string}\r\n   */\r\n  DataUriDoer.prototype.toString = function (base64) {\r\n    return encodeUri(this.data, this.type, this.attr, base64);\r\n  };\r\n\r\n  /**\r\n   * Parse data uri\r\n   * @param {string} uri\r\n   * @param {string} [type] Fallback mime type\r\n   * @param {string} [charset] Fallback charset\r\n   * @returns {DataUriDoer}\r\n   */\r\n  DataUriDoer.parse = function (uri, type, charset) {\r\n    var parsed = decodeUri(uri, type, charset);\r\n    return new DataUriDoer(parsed.data, parsed.type, parsed.attr);\r\n  };\r\n\r\n  /**\r\n   * Clone instance\r\n   * @param {DataUriDoer} dud\r\n   * @returns {DataUriDoer|null}\r\n   */\r\n  DataUriDoer.clone = function (dud) {\r\n    return isNil(dud) ? null : new DataUriDoer(dud.data, dud.type, clone(dud.attr));\r\n  };\r\n\r\n  /**\r\n   * Polyfill atob\r\n   */\r\n  if (typeof atob === 'undefined') {\r\n    global.atob = function (value) {\r\n      return new Buffer(value, 'base64').toString();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Polyfill btoa\r\n   */\r\n  if (typeof btoa === 'undefined') {\r\n    global.btoa = function (value) {\r\n      return new Buffer(value).toString('base64');\r\n    };\r\n  }\r\n\r\n  return DataUriDoer;\r\n});"]}